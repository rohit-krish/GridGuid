int getCorrespondingIndex(int index) {
  int row = (index / 9).floor();
  int col = index % 9;
  int boxRow = (row / 3).floor();
  int boxCol = (col / 3).floor();
  int boxIndex = boxRow * 3 + boxCol;
  int cellIndex = (row % 3) * 3 + (col % 3);
  int correspondingIndex = boxIndex * 9 + cellIndex;

  return correspondingIndex;
}

  // switch (index) {
  //   case 0:
  //     return board[0];
  //   case 1:
  //     return board[1];
  //   case 2:
  //     return board[2];
  //   case 3:
  //     return board[9];
  //   case 4:
  //     return board[10];
  //   case 5:
  //     return board[11];
  //   case 6:
  //     return board[18];
  //   case 7:
  //     return board[19];
  //   case 8:
  //     return board[20];
  //   case 9:
  //     return board[3];
  //   case 10:
  //     return board[4];
  //   case 11:
  //     return board[5];
  //   case 12:
  //     return board[12];
  //   case 13:
  //     return board[13];
  //   case 14:
  //     return board[14];
  //   case 15:
  //     return board[21];
  //   case 16:
  //     return board[22];
  //   case 17:
  //     return board[23];
  //   case 18:
  //     return board[6];
  //   case 19:
  //     return board[7];
  //   case 20:
  //     return board[8];
  //   case 21:
  //     return board[15];
  //   case 22:
  //     return board[16];
  //   case 23:
  //     return board[17];
  //   case 24:
  //     return board[24];
  //   case 25:
  //     return board[25];
  //   case 26:
  //     return board[26];
  //   case 27:
  //     return board[27];
  //   case 28:
  //     return board[28];
  //   case 29:
  //     return board[29];
  //   case 30:
  //     return board[36];
  //   case 31:
  //     return board[37];
  //   case 32:
  //     return board[38];
  //   case 33:
  //     return board[45];
  //   case 34:
  //     return board[46];
  //   case 35:
  //     return board[47];
  //   case 36:
  //     return board[30];
  //   case 37:
  //     return board[31];
  //   case 38:
  //     return board[32];
  //   case 39:
  //     return board[39];
  //   case 40:
  //     return board[40];
  //   case 41:
  //     return board[41];
  //   case 42:
  //     return board[48];
  //   case 43:
  //     return board[49];
  //   case 44:
  //     return board[50];
  //   case 45:
  //     return board[33];
  //   case 46:
  //     return board[34];
  //   case 47:
  //     return board[35];
  //   case 48:
  //     return board[42];
  //   case 49:
  //     return board[43];
  //   case 50:
  //     return board[44];
  //   case 51:
  //     return board[51];
  //   case 52:
  //     return board[52];
  //   case 53:
  //     return board[53];
  //   case 54:
  //     return board[54];
  //   case 55:
  //     return board[55];
  //   case 56:
  //     return board[56];
  //   case 57:
  //     return board[63];
  //   case 58:
  //     return board[64];
  //   case 59:
  //     return board[65];
  //   case 60:
  //     return board[72];
  //   case 61:
  //     return board[73];
  //   case 62:
  //     return board[74];
  //   case 63:
  //     return board[57];
  //   case 64:
  //     return board[58];
  //   case 65:
  //     return board[59];
  //   case 66:
  //     return board[66];
  //   case 67:
  //     return board[67];
  //   case 68:
  //     return board[68];
  //   case 69:
  //     return board[75];
  //   case 70:
  //     return board[76];
  //   case 71:
  //     return board[77];
  //   case 72:
  //     return board[60];
  //   case 73:
  //     return board[61];
  //   case 74:
  //     return board[62];
  //   case 75:
  //     return board[69];
  //   case 76:
  //     return board[70];
  //   case 77:
  //     return board[71];
  //   case 78:
  //     return board[78];
  //   case 79:
  //     return board[79];
  //   case 80:
  //     return board[80];
  //   default:
  //     return null;
  // }